Задание: связный список

На вход подается произвольное количество чисел. Необходимо:
1. Сохранить их в связном списке чисел в обратном порядке;
2. Написать функцию для подсчета суммы элементов связного списка;
3. Вывести их сумму;
4. Вывести элемент списка, соответствующий номеру вашего варианта, если список достаточно длинный, иначе сообщение о недостаточной длине с указанием точной длины;
5. Очистить за связным списком память.


Ограничения:
В поток ввода попадают только числа, разделенные произвольным количеством пробельных символов;

Каждое число влезает в формат int;


Дополнительные требования:
Все повторяющиеся операции должны делаться единообразным образом. Сделать это можно с помощью вызовов к функциям.

Писать маленькие функции - хорошо.

Конструирование элемента связного списка, обращение к его элементу по индексу, добавление в начало или конец относятся к повторяющимся операциям.

Мудро выражать функции друг через друга, так меньше работы и код надежнее. 


Рекомендованный набор функций:
list_create – принимает число, возвращает указатель на созданный в куче элемент связного списка;
list_add_front – принимает число и указатель на указатель на
связный список. Добавляет число в начало списка.
Пример: список (1,2,3), число 5 -> список становится (5,1,2,3).
list_add_back, аналогично, добавляет элемент в конец. Это более медленная операция, т.к. приходится пройтись по всему списку;
list_get получает элемент по индексу;
list_free освобождает память для всех элементов списка;
list_length принимает список и считает его длину;
list_node_at принимает список и индекс, возвращает указатель
на структуру list_t, соответствующую нужному элементу спис-
ка. Если индекс слишком большой, вернуть NULL;
list_sum принимает список, возвращает сумму элементов в нем.